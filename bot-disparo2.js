/* Bot disparo canais 
const axios = require("axios");

const API_URL = "http://localhost:3001";

// ‚úÖ Usando apenas o primeiro grupo para disparo
const NUMEROS_GRUPO_1 = [
  "5511960273969",
  
];

const NUMEROS = NUMEROS_GRUPO_1; // ‚úÖ ativa o grupo 1

const MENSAGENS = [
  `üí• MEGA CANAIS ‚Äì qualidade, estabilidade e + de 25.000 conte√∫dos!

üì∫ Canais ao vivo em HD e Full HD  
üé¨ Filmes e s√©ries atualizadas  
‚öΩ Premiere, Combate, TNT, SporTV, BBB, Champions  
üéØ Funciona no celular, Smart TV, TV Box, notebook e +  
üöÄ Instala√ß√£o r√°pida + Suporte VIP

ü§ë Apenas R$24,99 por m√™s!

üß™ TESTE GR√ÅTIS de 4 horas pra voc√™ ver que √© top!

üëâ Me chama aqui pra ativar o seu teste: https://wa.me/5511999999999

üìå Confian√ßa, qualidade e mais de 300 clientes ativos.

‚ö†Ô∏è Promo√ß√£o v√°lida at√© HOJE! Aproveita!`
];

const INTERVALO_ENTRE_NUMEROS = 50 * 1000; // 50 segundos
const SEU_NUMERO = "5511960273969";
const esperar = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function iniciarEnvios() {
  try {
    const { data: instancias } = await axios.get(`${API_URL}/api/instancias`);
    const instanciaConectada = instancias.find(
      (inst) => inst.status === "conectado"
    );

    if (!instanciaConectada) {
      console.log("‚ùå Nenhuma inst√¢ncia conectada.");
      return;
    }

    let contadorDisparos = 0;
    const total = NUMEROS.length;

    for (let i = 0; i < total; i++) {
      const numero = NUMEROS[i];
      const mensagemParaEnviar = MENSAGENS[0]; // S√≥ 1 mensagem neste caso

      try {
        const payload = {
          telefone: numero,
          message: mensagemParaEnviar,
        };

        const { data } = await axios.post(
          `${API_URL}/send-whatsapp/encomenda`,
          payload
        );

        contadorDisparos++;
        console.log(`‚úÖ [${contadorDisparos}/${total}] Mensagem enviada para ${numero}:`, data);
      } catch (err) {
        console.error(`‚ö†Ô∏è Erro ao enviar para ${numero}:`, err.message);
      }

      if (i < total - 1) {
        console.log(`‚è≥ Esperando ${INTERVALO_ENTRE_NUMEROS / 1000}s...`);
        await esperar(INTERVALO_ENTRE_NUMEROS);
      }
    }

    const payloadFinal = {
      telefone: SEU_NUMERO,
      message: "‚úÖ Todos os envios foram conclu√≠dos com sucesso!",
    };

    await axios.post(`${API_URL}/send-whatsapp/encomenda`, payloadFinal);
    console.log("üì© Mensagem de conclus√£o enviada para voc√™.");
  } catch (err) {
    console.error("‚ùå Erro durante execu√ß√£o:", err.message);
  }
}

iniciarEnvios();
 */

/* const axios = require("axios");


const verificarServidor = async () => {
  try {
    const resposta = await axios.get("http://localhost:3001/health"); // Verifica se o servidor est√° funcionando (supondo que tenha um endpoint /health)
    return resposta.status === 200;
  } catch (error) {
    console.error("‚ùå O servidor n√£o est√° dispon√≠vel:", error.message);
    return false;
  }
};

const iniciarBotDisparo = async (instancia, socket) => {
  const servidorDisponivel = await verificarServidor();

  if (!servidorDisponivel) {
    console.log("‚ùå Servidor indispon√≠vel, bot n√£o ser√° iniciado.");
    return;
  }

  console.log("‚úÖ Servidor dispon√≠vel, iniciando o bot de disparo...");

  const NUMEROS = [
    "5511960273969", // Pode adicionar mais n√∫meros conforme o caso
  ];

  const MENSAGENS = [
    `üí• MEGA CANAIS ‚Äì qualidade, estabilidade e + de 25.000 conte√∫dos!  
    üì∫ Canais ao vivo em HD e Full HD...`, // A mensagem do bot
  ];

  const INTERVALO_ENTRE_NUMEROS = 50 * 1000; // 50 segundos
  const SEU_NUMERO = "5511960273969";

  const esperar = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  let contadorDisparos = 0;
  const total = NUMEROS.length;

  for (let i = 0; i < total; i++) {
    const numero = NUMEROS[i];
    const mensagemParaEnviar = MENSAGENS[0];

    try {
      const payload = {
        telefone: numero,
        message: mensagemParaEnviar,
      };

      const { data } = await axios.post(
        `${API_URL}/send-whatsapp/encomenda`,
        payload
      );

      contadorDisparos++;
      console.log(
        `‚úÖ [${contadorDisparos}/${total}] Mensagem enviada para ${numero}:`,
        data
      );
    } catch (err) {
      console.error(`‚ö†Ô∏è Erro ao enviar para ${numero}:`, err.message);
    }

    if (i < total - 1) {
      console.log(`‚è≥ Esperando ${INTERVALO_ENTRE_NUMEROS / 1000}s...`);
      await esperar(INTERVALO_ENTRE_NUMEROS);
    }
  }

  const payloadFinal = {
    telefone: SEU_NUMERO,
    message: "‚úÖ Todos os envios foram conclu√≠dos com sucesso!",
  };

  await axios.post(`${API_URL}/send-whatsapp/encomenda`, payloadFinal);
  console.log("üì© Mensagem de conclus√£o enviada para voc√™.");
};

const startSession = async (sessionId, instancia) => {
  // Verifica o status de conex√£o e inicializa o bot
  try {
    const socket = makeWASocket({
      auth: state,
      printQRInTerminal: false,
      browser: ["Ubuntu", "Chrome", "80"],
      syncFullHistory: false,
      markOnlineOnConnect: false,
      connectTimeoutMs: 90_000,
    });

    socket.ev.on("connection.update", async (update) => {
      const { connection, qr } = update;

      if (connection === "open") {
        // Conex√£o estabelecida, agora verifica se h√° bot a ser executado
        if (instancia.botName === "disparoBot") {
          await iniciarBotDisparo(instancia, socket);
        }
      }
    });
  } catch (error) {
    console.error("Erro ao iniciar a inst√¢ncia:", error.message);
  }
};
 */
 /* const axios = require("axios");
const { makeWASocket } = require("@adiwajshing/baileys"); // Verifique se a biblioteca est√° instalada

// URL do servidor onde as inst√¢ncias de WhatsApp est√£o rodando
const API_URL = "http://localhost:3001";

// Fun√ß√£o para verificar a sa√∫de do servidor
const verificarServidor = async () => {
  try {
    const resposta = await axios.get(`${API_URL}/health`); // Endpoint para verificar a sa√∫de do servidor
    return resposta.status === 200;
  } catch (error) {
    console.error("‚ùå O servidor n√£o est√° dispon√≠vel:", error.message);
    return false;
  }
};

// Fun√ß√£o para pegar as inst√¢ncias ativas do servidor
const obterInstanciaAtiva = async () => {
  try {
    const { data: instancias } = await axios.get(`${API_URL}/api/instancias`);
    const instanciaAtiva = instancias.find((inst) => inst.status === "conectado");
    if (instanciaAtiva) {
      return instanciaAtiva;
    }
    throw new Error("Nenhuma inst√¢ncia conectada encontrada.");
  } catch (error) {
    console.error("‚ùå Erro ao obter inst√¢ncias:", error.message);
    return null;
  }
};
// Fun√ß√£o para iniciar o bot de disparo
const iniciarBotDisparo = async (instancia, socket) => {
  console.log("‚úÖ Iniciando o bot de disparo...");

  const NUMEROS = ["5511960273969"]; // Pode adicionar mais n√∫meros conforme o caso
  const MENSAGENS = [
    `üí• MEGA CANAIS ‚Äì qualidade, estabilidade e + de 25.000 conte√∫dos!  
    üì∫ Canais ao vivo em HD e Full HD...`, // A mensagem do bot
  ];

  const INTERVALO_ENTRE_NUMEROS = 50 * 1000; // 50 segundos
  const SEU_NUMERO = "5511960273969";

  const esperar = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  let contadorDisparos = 0;
  const total = NUMEROS.length;

  for (let i = 0; i < total; i++) {
    const numero = NUMEROS[i];
    const mensagemParaEnviar = MENSAGENS[0];

    try {
      const payload = {
        telefone: numero,
        message: mensagemParaEnviar,
      };

      const { data } = await axios.post(
        `${API_URL}/send-whatsapp/encomenda`,
        payload
      );

      contadorDisparos++;
      console.log(
        `‚úÖ [${contadorDisparos}/${total}] Mensagem enviada para ${numero}:`,
        data
      );
    } catch (err) {
      console.error(`‚ö†Ô∏è Erro ao enviar para ${numero}:`, err.message);
    }

    if (i < total - 1) {
      console.log(`‚è≥ Esperando ${INTERVALO_ENTRE_NUMEROS / 1000}s...`);
      await esperar(INTERVALO_ENTRE_NUMEROS);
    }
  }

  const payloadFinal = {
    telefone: SEU_NUMERO,
    message: "‚úÖ Todos os envios foram conclu√≠dos com sucesso!",
  };

  await axios.post(`${API_URL}/send-whatsapp/encomenda`, payloadFinal);
  console.log("üì© Mensagem de conclus√£o enviada para voc√™.");
};

// Fun√ß√£o para iniciar a sess√£o com o WhatsApp
const startSession = async (instanciaAtiva) => {
  try {
    const socket = makeWASocket({
      auth: instanciaAtiva.auth, // A autentica√ß√£o da inst√¢ncia
      printQRInTerminal: false,
      browser: ["Ubuntu", "Chrome", "80"],
      syncFullHistory: false,
      markOnlineOnConnect: false,
      connectTimeoutMs: 90_000, // Timeout de 90 segundos
    });

    socket.ev.on("connection.update", async (update) => {
      const { connection, qr } = update;

      if (connection === "open") {
        console.log("‚úÖ Conex√£o com o WhatsApp estabelecida!");
        // Quando a conex√£o for estabelecida, come√ßa o disparo
        await iniciarBotDisparo(instanciaAtiva, socket);
      } else if (connection === "qr") {
        console.log("üì∏ QR Code gerado para escanear:");
        console.log(qr);
      }
    });
  } catch (error) {
    console.error("‚ùå Erro ao iniciar a inst√¢ncia:", error.message);
  }
};
// Fun√ß√£o principal para iniciar o bot
const iniciarBot = async () => {
  const servidorDisponivel = await verificarServidor();
  if (!servidorDisponivel) {
    console.log("‚ùå Servidor indispon√≠vel, bot n√£o ser√° iniciado.");
    return;
  }

  console.log("‚úÖ Servidor dispon√≠vel, verificando inst√¢ncias...");
  const instanciaAtiva = await obterInstanciaAtiva();
  
  if (!instanciaAtiva) {
    console.log("‚ùå Nenhuma inst√¢ncia ativa encontrada.");
    return;
  }

  console.log("‚úÖ Inst√¢ncia ativa encontrada, conectando ao WhatsApp...");
  await startSession(instanciaAtiva);
};

// Iniciar o bot
iniciarBot();
 */
